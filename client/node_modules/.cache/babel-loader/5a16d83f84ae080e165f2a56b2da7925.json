{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport function registerUser(userData, history) {\n  return dispatch => {\n    console.log(\"do we get here? sasadsd\");\n    axios.post(\"/api/users/register\", userData).then(res => history.push(\"/login\")) // re-direct to login on successful register\n    .catch(err => dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    }));\n    console.log(\"we passed the asdasda\");\n  };\n}\nexport const registerConsult = (newConsult, history) => dispatch => {\n  console.log(\"disaster?\");\n  axios.post(\"/api/consults/consult\", newConsult).then(res => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/home/elvis/Documents/GitHub/medbase/mern-auth/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","console","log","post","then","res","push","catch","err","type","payload","response","data","registerConsult","newConsult","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,OAAhC,EAAyC;AAC9C,SAAQC,QAAD,IAAc;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAX,IAAAA,KAAK,CACFY,IADH,CACQ,qBADR,EAC+BL,QAD/B,EAEGM,IAFH,CAESC,GAAD,IAASN,OAAO,CAACO,IAAR,CAAa,QAAb,CAFjB,EAEyC;AAFzC,KAGGC,KAHH,CAGUC,GAAD,IACLR,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEf,UADC;AAEPgB,MAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,KAAD,CAJZ;AASAX,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,GAZD;AAaD;AAED,OAAO,MAAMW,eAAe,GAAG,CAACC,UAAD,EAAaf,OAAb,KAA0BC,QAAD,IAAc;AACpEC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAX,EAAAA,KAAK,CACFY,IADH,CACQ,uBADR,EACiCW,UADjC,EAEGV,IAFH,CAESC,GAAD,IAASN,OAAO,CAACO,IAAR,CAAa,QAAb,CAFjB,EAEyC;AAFzC,GAGGC,KAHH,CAGUC,GAAD,IACLR,QAAQ,CAAC;AACPS,IAAAA,IAAI,EAAEf,UADC;AAEPgB,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAJZ;AASD,CAXM,C,CAaP;;AACA,OAAO,MAAMG,SAAS,GAAIjB,QAAD,IAAeE,QAAD,IAAc;AACnDT,EAAAA,KAAK,CACFY,IADH,CACQ,kBADR,EAC4BL,QAD5B,EAEGM,IAFH,CAESC,GAAD,IAAS;AACb;AACA;AACA,UAAM;AAAEW,MAAAA;AAAF,QAAYX,GAAG,CAACO,IAAtB;AACAK,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJa,CAKb;;AACAxB,IAAAA,YAAY,CAACwB,KAAD,CAAZ,CANa,CAOb;;AACA,UAAMG,OAAO,GAAG1B,UAAU,CAACuB,KAAD,CAA1B,CARa,CASb;;AACAhB,IAAAA,QAAQ,CAACoB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAbH,EAcGZ,KAdH,CAcUC,GAAD,IACLR,QAAQ,CAAC;AACPS,IAAAA,IAAI,EAAEf,UADC;AAEPgB,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAfZ;AAoBD,CArBM,C,CAsBP;;AACA,OAAO,MAAMQ,cAAc,GAAID,OAAD,IAAa;AACzC,SAAO;AACLV,IAAAA,IAAI,EAAEd,gBADD;AAELe,IAAAA,OAAO,EAAES;AAFJ,GAAP;AAID,CALM,C,CAMP;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAO;AACLZ,IAAAA,IAAI,EAAEb;AADD,GAAP;AAGD,CAJM,C,CAKP;;AACA,OAAO,MAAM0B,UAAU,GAAG,MAAOtB,QAAD,IAAc;AAC5C;AACAiB,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAF4C,CAG5C;;AACA/B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ4C,CAK5C;;AACAQ,EAAAA,QAAQ,CAACoB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n// Register User\nexport function registerUser(userData, history) {\n  return (dispatch) => {\n    console.log(\"do we get here? sasadsd\");\n    axios\n      .post(\"/api/users/register\", userData)\n      .then((res) => history.push(\"/login\")) // re-direct to login on successful register\n      .catch((err) =>\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data,\n        })\n      );\n    console.log(\"we passed the asdasda\")\n  };\n}\n\nexport const registerConsult = (newConsult, history) => (dispatch) => {\n  console.log(\"disaster?\");\n  axios\n    .post(\"/api/consults/consult\", newConsult)\n    .then((res) => history.push(\"/login\")) // re-direct to login on successful register\n    .catch((err) =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data,\n      })\n    );\n};\n\n// Login - get user token\nexport const loginUser = (userData) => (dispatch) => {\n  axios\n    .post(\"/api/users/login\", userData)\n    .then((res) => {\n      // Save to localStorage\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch((err) =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data,\n      })\n    );\n};\n// Set logged in user\nexport const setCurrentUser = (decoded) => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded,\n  };\n};\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING,\n  };\n};\n// Log user out\nexport const logoutUser = () => (dispatch) => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}