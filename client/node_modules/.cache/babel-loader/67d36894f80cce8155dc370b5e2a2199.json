{"ast":null,"code":"if (typeof require === \"function\") var Parser = require(\"jison\").Parser;\nvar parsexp = new Parser({\n  \"bnf\": {\n    \"pattern\": [[\"expression EOF\", \"return $1;\"]],\n    \"expression\": [[\"expression | sequence\", \"$$ = yy.expression($1, $3);\"], [\"sequence\", \"$$ = $1;\"]],\n    \"sequence\": [[\"sequence group\", \"$$ = yy.sequence($1, $2);\"], [\"group\", \"$$ = $1;\"]],\n    \"group\": [[\"atom *\", \"$$ = yy.group($1);\"], [\"atom\", \"$$ = $1;\"]],\n    \"atom\": [[\"SYMBOL\", \"$$ = yy.atom($1);\"], [\"( expression )\", \"$$ = $2;\"]]\n  }\n});\nif (typeof module === \"object\") module.exports = parsexp;","map":{"version":3,"sources":["/home/elvis/Documents/GitHub/medbase/mern-auth/node_modules/regex/lib/parsexp.js"],"names":["require","Parser","parsexp","module","exports"],"mappings":"AAAA,IAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC,IAAIC,MAAM,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiBC,MAA9B;AAEnC,IAAIC,OAAO,GAAG,IAAID,MAAJ,CAAW;AACrB,SAAO;AACH,eAAW,CACP,CAAC,gBAAD,EAAmB,YAAnB,CADO,CADR;AAIH,kBAAc,CACV,CAAC,uBAAD,EAA0B,6BAA1B,CADU,EAEV,CAAC,UAAD,EAA0B,UAA1B,CAFU,CAJX;AAQH,gBAAY,CACR,CAAC,gBAAD,EAAmB,2BAAnB,CADQ,EAER,CAAC,OAAD,EAAmB,UAAnB,CAFQ,CART;AAYH,aAAS,CACL,CAAC,QAAD,EAAW,oBAAX,CADK,EAEL,CAAC,MAAD,EAAW,UAAX,CAFK,CAZN;AAgBH,YAAQ,CACJ,CAAC,QAAD,EAAmB,mBAAnB,CADI,EAEJ,CAAC,gBAAD,EAAmB,UAAnB,CAFI;AAhBL;AADc,CAAX,CAAd;AAwBA,IAAI,OAAOE,MAAP,KAAkB,QAAtB,EAAgCA,MAAM,CAACC,OAAP,GAAiBF,OAAjB","sourcesContent":["if (typeof require === \"function\") var Parser = require(\"jison\").Parser;\n\nvar parsexp = new Parser({\n    \"bnf\": {\n        \"pattern\": [\n            [\"expression EOF\", \"return $1;\"]\n        ],\n        \"expression\": [\n            [\"expression | sequence\", \"$$ = yy.expression($1, $3);\"],\n            [\"sequence\",              \"$$ = $1;\"]\n        ],\n        \"sequence\": [\n            [\"sequence group\", \"$$ = yy.sequence($1, $2);\"],\n            [\"group\",          \"$$ = $1;\"]\n        ],\n        \"group\": [\n            [\"atom *\", \"$$ = yy.group($1);\"],\n            [\"atom\",   \"$$ = $1;\"]\n        ],\n        \"atom\": [\n            [\"SYMBOL\",         \"$$ = yy.atom($1);\"],\n            [\"( expression )\", \"$$ = $2;\"]\n        ]\n    }\n});\n\nif (typeof module === \"object\") module.exports = parsexp;\n"]},"metadata":{},"sourceType":"script"}