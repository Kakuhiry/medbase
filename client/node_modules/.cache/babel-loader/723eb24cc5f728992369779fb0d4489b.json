{"ast":null,"code":"var bnf = require(\"./parser\").parser,\n    ebnf = require(\"./ebnf-transform\"),\n    jisonlex = require(\"lex-parser\");\n\nexports.parse = function parse(grammar) {\n  return bnf.parse(grammar);\n};\n\nexports.transform = ebnf.transform; // adds a declaration to the grammar\n\nbnf.yy.addDeclaration = function (grammar, decl) {\n  if (decl.start) {\n    grammar.start = decl.start;\n  } else if (decl.lex) {\n    grammar.lex = parseLex(decl.lex);\n  } else if (decl.operator) {\n    if (!grammar.operators) grammar.operators = [];\n    grammar.operators.push(decl.operator);\n  } else if (decl.parseParam) {\n    if (!grammar.parseParams) grammar.parseParams = [];\n    grammar.parseParams = grammar.parseParams.concat(decl.parseParam);\n  } else if (decl.include) {\n    if (!grammar.moduleInclude) grammar.moduleInclude = '';\n    grammar.moduleInclude += decl.include;\n  } else if (decl.options) {\n    if (!grammar.options) grammar.options = {};\n\n    for (var i = 0; i < decl.options.length; i++) {\n      grammar.options[decl.options[i]] = true;\n    }\n  }\n}; // parse an embedded lex section\n\n\nvar parseLex = function (text) {\n  return jisonlex.parse(text.replace(/(?:^%lex)|(?:\\/lex$)/g, ''));\n};","map":{"version":3,"sources":["/home/elvis/Documents/GitHub/medbase/mern-auth/node_modules/ebnf-parser/ebnf-parser.js"],"names":["bnf","require","parser","ebnf","jisonlex","exports","parse","grammar","transform","yy","addDeclaration","decl","start","lex","parseLex","operator","operators","push","parseParam","parseParams","concat","include","moduleInclude","options","i","length","text","replace"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoBC,MAA9B;AAAA,IACIC,IAAI,GAAGF,OAAO,CAAC,kBAAD,CADlB;AAAA,IAEIG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAFtB;;AAIAI,OAAO,CAACC,KAAR,GAAgB,SAASA,KAAT,CAAgBC,OAAhB,EAAyB;AAAE,SAAOP,GAAG,CAACM,KAAJ,CAAUC,OAAV,CAAP;AAA4B,CAAvE;;AACAF,OAAO,CAACG,SAAR,GAAoBL,IAAI,CAACK,SAAzB,C,CAEA;;AACAR,GAAG,CAACS,EAAJ,CAAOC,cAAP,GAAwB,UAAUH,OAAV,EAAmBI,IAAnB,EAAyB;AAC7C,MAAIA,IAAI,CAACC,KAAT,EAAgB;AACZL,IAAAA,OAAO,CAACK,KAAR,GAAgBD,IAAI,CAACC,KAArB;AAEH,GAHD,MAGO,IAAID,IAAI,CAACE,GAAT,EAAc;AACjBN,IAAAA,OAAO,CAACM,GAAR,GAAcC,QAAQ,CAACH,IAAI,CAACE,GAAN,CAAtB;AAEH,GAHM,MAGA,IAAIF,IAAI,CAACI,QAAT,EAAmB;AACtB,QAAI,CAACR,OAAO,CAACS,SAAb,EAAwBT,OAAO,CAACS,SAAR,GAAoB,EAApB;AACxBT,IAAAA,OAAO,CAACS,SAAR,CAAkBC,IAAlB,CAAuBN,IAAI,CAACI,QAA5B;AAEH,GAJM,MAIA,IAAIJ,IAAI,CAACO,UAAT,EAAqB;AACxB,QAAI,CAACX,OAAO,CAACY,WAAb,EAA0BZ,OAAO,CAACY,WAAR,GAAsB,EAAtB;AAC1BZ,IAAAA,OAAO,CAACY,WAAR,GAAsBZ,OAAO,CAACY,WAAR,CAAoBC,MAApB,CAA2BT,IAAI,CAACO,UAAhC,CAAtB;AAEH,GAJM,MAIA,IAAIP,IAAI,CAACU,OAAT,EAAkB;AACrB,QAAI,CAACd,OAAO,CAACe,aAAb,EAA4Bf,OAAO,CAACe,aAAR,GAAwB,EAAxB;AAC5Bf,IAAAA,OAAO,CAACe,aAAR,IAAyBX,IAAI,CAACU,OAA9B;AAEH,GAJM,MAIA,IAAIV,IAAI,CAACY,OAAT,EAAkB;AACrB,QAAI,CAAChB,OAAO,CAACgB,OAAb,EAAsBhB,OAAO,CAACgB,OAAR,GAAkB,EAAlB;;AACtB,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGb,IAAI,CAACY,OAAL,CAAaE,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxCjB,MAAAA,OAAO,CAACgB,OAAR,CAAgBZ,IAAI,CAACY,OAAL,CAAaC,CAAb,CAAhB,IAAmC,IAAnC;AACH;AACJ;AAEJ,CA1BD,C,CA4BA;;;AACA,IAAIV,QAAQ,GAAG,UAAUY,IAAV,EAAgB;AAC3B,SAAOtB,QAAQ,CAACE,KAAT,CAAeoB,IAAI,CAACC,OAAL,CAAa,uBAAb,EAAsC,EAAtC,CAAf,CAAP;AACH,CAFD","sourcesContent":["var bnf = require(\"./parser\").parser,\n    ebnf = require(\"./ebnf-transform\"),\n    jisonlex = require(\"lex-parser\");\n\nexports.parse = function parse (grammar) { return bnf.parse(grammar); };\nexports.transform = ebnf.transform;\n\n// adds a declaration to the grammar\nbnf.yy.addDeclaration = function (grammar, decl) {\n    if (decl.start) {\n        grammar.start = decl.start;\n\n    } else if (decl.lex) {\n        grammar.lex = parseLex(decl.lex);\n\n    } else if (decl.operator) {\n        if (!grammar.operators) grammar.operators = [];\n        grammar.operators.push(decl.operator);\n\n    } else if (decl.parseParam) {\n        if (!grammar.parseParams) grammar.parseParams = [];\n        grammar.parseParams = grammar.parseParams.concat(decl.parseParam);\n\n    } else if (decl.include) {\n        if (!grammar.moduleInclude) grammar.moduleInclude = '';\n        grammar.moduleInclude += decl.include;\n\n    } else if (decl.options) {\n        if (!grammar.options) grammar.options = {};\n        for (var i=0; i < decl.options.length; i++) {\n            grammar.options[decl.options[i]] = true;\n        }\n    }\n\n};\n\n// parse an embedded lex section\nvar parseLex = function (text) {\n    return jisonlex.parse(text.replace(/(?:^%lex)|(?:\\/lex$)/g, ''));\n};\n\n"]},"metadata":{},"sourceType":"script"}