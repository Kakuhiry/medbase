{"ast":null,"code":"// Set class to wrap arrays\nvar typal = require(\"./typal\").typal;\n\nvar setMixin = {\n  constructor: function Set_constructor(set, raw) {\n    this._items = [];\n    if (set && set.constructor === Array) this._items = raw ? set : set.slice(0);else if (arguments.length) this._items = [].slice.call(arguments, 0);\n  },\n  concat: function concat(setB) {\n    this._items.push.apply(this._items, setB._items || setB);\n\n    return this;\n  },\n  eq: function eq(set) {\n    return this._items.length === set._items.length && this.subset(set);\n  },\n  indexOf: function indexOf(item) {\n    if (item && item.eq) {\n      for (var k = 0; k < this._items.length; k++) if (item.eq(this._items[k])) return k;\n\n      return -1;\n    }\n\n    return this._items.indexOf(item);\n  },\n  union: function union(set) {\n    return new Set(this._items).concat(this.complement(set));\n  },\n  intersection: function intersection(set) {\n    return this.filter(function (elm) {\n      return set.contains(elm);\n    });\n  },\n  complement: function complement(set) {\n    var that = this;\n    return set.filter(function sub_complement(elm) {\n      return !that.contains(elm);\n    });\n  },\n  subset: function subset(set) {\n    var cont = true;\n\n    for (var i = 0; i < this._items.length && cont; i++) {\n      cont = cont && set.contains(this._items[i]);\n    }\n\n    return cont;\n  },\n  superset: function superset(set) {\n    return set.subset(this);\n  },\n  joinSet: function joinSet(set) {\n    return this.concat(this.complement(set));\n  },\n  contains: function contains(item) {\n    return this.indexOf(item) !== -1;\n  },\n  item: function item(v, val) {\n    return this._items[v];\n  },\n  i: function i(v, val) {\n    return this._items[v];\n  },\n  first: function first() {\n    return this._items[0];\n  },\n  last: function last() {\n    return this._items[this._items.length - 1];\n  },\n  size: function size() {\n    return this._items.length;\n  },\n  isEmpty: function isEmpty() {\n    return this._items.length === 0;\n  },\n  copy: function copy() {\n    return new Set(this._items);\n  },\n  toString: function toString() {\n    return this._items.toString();\n  }\n};\n\"push shift unshift forEach some every join sort\".split(' ').forEach(function (e, i) {\n  setMixin[e] = function () {\n    return Array.prototype[e].apply(this._items, arguments);\n  };\n\n  setMixin[e].name = e;\n});\n\"filter slice map\".split(' ').forEach(function (e, i) {\n  setMixin[e] = function () {\n    return new Set(Array.prototype[e].apply(this._items, arguments), true);\n  };\n\n  setMixin[e].name = e;\n});\nvar Set = typal.construct(setMixin).mix({\n  union: function (a, b) {\n    var ar = {};\n\n    for (var k = a.length - 1; k >= 0; --k) {\n      ar[a[k]] = true;\n    }\n\n    for (var i = b.length - 1; i >= 0; --i) {\n      if (!ar[b[i]]) {\n        a.push(b[i]);\n      }\n    }\n\n    return a;\n  }\n});\nif (typeof exports !== 'undefined') exports.Set = Set;","map":{"version":3,"sources":["/home/elvis/Documents/GitHub/medbase/mern-auth/node_modules/jison/lib/util/set.js"],"names":["typal","require","setMixin","constructor","Set_constructor","set","raw","_items","Array","slice","arguments","length","call","concat","setB","push","apply","eq","subset","indexOf","item","k","union","Set","complement","intersection","filter","elm","contains","that","sub_complement","cont","i","superset","joinSet","v","val","first","last","size","isEmpty","copy","toString","split","forEach","e","prototype","name","construct","mix","a","b","ar","exports"],"mappings":"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","sourcesContent":["// Set class to wrap arrays\n\nvar typal = require(\"./typal\").typal;\n\nvar setMixin = {\n    constructor: function Set_constructor (set, raw) {\n        this._items = [];\n        if (set && set.constructor === Array)\n            this._items = raw ? set: set.slice(0);\n        else if(arguments.length)\n            this._items = [].slice.call(arguments,0);\n    },\n    concat: function concat (setB) {\n        this._items.push.apply(this._items, setB._items || setB); \n        return this;\n    },\n    eq: function eq (set) {\n        return this._items.length === set._items.length && this.subset(set); \n    },\n    indexOf: function indexOf (item) {\n        if(item && item.eq) {\n            for(var k=0; k<this._items.length;k++)\n                if(item.eq(this._items[k]))\n                    return k;\n            return -1;\n        }\n        return this._items.indexOf(item);\n    },\n    union: function union (set) {\n        return (new Set(this._items)).concat(this.complement(set));\n    },\n    intersection: function intersection (set) {\n    return this.filter(function (elm) {\n            return set.contains(elm);\n        });\n    },\n    complement: function complement (set) {\n        var that = this;\n        return set.filter(function sub_complement (elm) {\n            return !that.contains(elm);\n        });\n    },\n    subset: function subset (set) {\n        var cont = true;\n        for (var i=0; i<this._items.length && cont;i++) {\n            cont = cont && set.contains(this._items[i]);\n        }\n        return cont;\n    },\n    superset: function superset (set) {\n        return set.subset(this);\n    },\n    joinSet: function joinSet (set) {\n        return this.concat(this.complement(set));\n    },\n    contains: function contains (item) { return this.indexOf(item) !== -1; },\n    item: function item (v, val) { return this._items[v]; },\n    i: function i (v, val) { return this._items[v]; },\n    first: function first () { return this._items[0]; },\n    last: function last () { return this._items[this._items.length-1]; },\n    size: function size () { return this._items.length; },\n    isEmpty: function isEmpty () { return this._items.length === 0; },\n    copy: function copy () { return new Set(this._items); },\n    toString: function toString () { return this._items.toString(); }\n};\n\n\"push shift unshift forEach some every join sort\".split(' ').forEach(function (e,i) {\n    setMixin[e] = function () { return Array.prototype[e].apply(this._items, arguments); };\n    setMixin[e].name = e;\n});\n\"filter slice map\".split(' ').forEach(function (e,i) {\n    setMixin[e] = function () { return new Set(Array.prototype[e].apply(this._items, arguments), true); };\n    setMixin[e].name = e;\n});\n\nvar Set = typal.construct(setMixin).mix({\n    union: function (a, b) {\n        var ar = {};\n        for (var k=a.length-1;k >=0;--k) {\n            ar[a[k]] = true;\n        }\n        for (var i=b.length-1;i >= 0;--i) {\n            if (!ar[b[i]]) {\n                a.push(b[i]);\n            }\n        }\n        return a;\n    }\n});\n\nif (typeof exports !== 'undefined')\n    exports.Set = Set;\n\n"]},"metadata":{},"sourceType":"script"}