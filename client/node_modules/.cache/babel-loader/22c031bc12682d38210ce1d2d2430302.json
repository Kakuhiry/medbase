{"ast":null,"code":"if (typeof module === \"object\") module.exports = StateMachine;\n\nif (typeof require === \"function\") {\n  var SortedArray = require(\"sorted-array\");\n\n  require(\"augment\");\n}\n\nvar sortable = Function.bindable(SortedArray, null);\n\nfunction StateMachine(transition, final) {\n  this.transition = transition;\n  this.final = final;\n}\n\nStateMachine.Deterministic = StateMachine.augment(function (base) {\n  this.constructor = function (transition, final) {\n    base.constructor.call(this, transition, final);\n  };\n\n  this.test = function (string) {\n    var state = 0,\n        index = 0;\n    var length = string.length;\n    var transition = this.transition;\n\n    while (index < length) {\n      state = transition[state][string.charAt(index++)];\n      if (typeof state === \"undefined\") return false;\n    }\n\n    return this.final.indexOf(state) >= 0;\n  };\n});\nStateMachine.Nondeterministic = StateMachine.augment(function (base) {\n  this.constructor = function (transition, final) {\n    base.constructor.call(this, transition, final);\n  };\n\n  this.test = function (string) {\n    var index = 0;\n    var length = string.length;\n    var state = epsilonMoves.call(this, 0);\n\n    while (index < length) {\n      state = moveOn.apply(this, [string.charAt(index++)].concat(state));\n      if (state.length) state = epsilonMoves.apply(this, state);else return false;\n    }\n\n    return isFinal.apply(this, state);\n  };\n\n  this.subset = function () {\n    var initial = epsilonMoves.call(this, 0);\n    var names = [initial.toString()];\n    var states = [initial];\n    var transition = [];\n    var final = [];\n\n    for (var i = 0; i < states.length; i++) {\n      var state = states[i];\n      var symbols = moves.apply(this, state);\n      var length = symbols.length;\n      var node = {};\n\n      for (var j = 0; j < length; j++) {\n        var symbol = symbols[j];\n        var next = epsilonMoves.apply(this, moveOn.apply(this, [symbol].concat(state)));\n        var name = next.toString();\n        var index = names.indexOf(name);\n\n        if (index < 0) {\n          states.push(next);\n          index = names.length;\n          names.push(name);\n        }\n\n        node[symbol] = index;\n      }\n\n      transition.push(node);\n      if (isFinal.apply(this, state)) final.push(i);\n    }\n\n    return new StateMachine.Deterministic(transition, final);\n  };\n\n  function epsilonMoves() {\n    var stack = Array.from(arguments);\n    var states = new (sortable.apply(null, stack))();\n    var transition = this.transition;\n\n    while (stack.length) {\n      var moves = transition[stack.pop()][\"\"];\n\n      if (moves) {\n        var length = moves.length;\n\n        for (var i = 0; i < length; i++) {\n          var move = moves[i];\n\n          if (states.search(move) < 0) {\n            states.insert(move);\n            stack.push(move);\n          }\n        }\n      }\n    }\n\n    return states.array;\n  }\n\n  function moves() {\n    var transition = this.transition;\n    var stack = Array.from(arguments);\n    var symbols = new SortedArray();\n\n    while (stack.length) {\n      var keys = Object.keys(transition[stack.pop()]);\n      var length = keys.length;\n\n      for (var i = 0; i < length; i++) {\n        var key = keys[i];\n        if (symbols.search(key) < 0) symbols.insert(key);\n      }\n    }\n\n    return symbols.remove(\"\").array;\n  }\n\n  function moveOn(symbol) {\n    var stack = Array.from(arguments, 1);\n    var transition = this.transition;\n    var states = new SortedArray();\n\n    while (stack.length) {\n      var moves = transition[stack.pop()][symbol];\n\n      if (moves) {\n        var length = moves.length;\n\n        for (var i = 0; i < length; i++) {\n          var move = moves[i];\n          if (states.search(move) < 0) states.insert(move);\n        }\n      }\n    }\n\n    return states.array;\n  }\n\n  function isFinal() {\n    var stack = Array.from(arguments);\n    var final = this.final;\n\n    while (stack.length) if (final.indexOf(stack.pop()) >= 0) return true;\n\n    return false;\n  }\n});","map":{"version":3,"sources":["/home/elvis/Documents/GitHub/medbase/mern-auth/node_modules/statemachines/lib/statemachines.js"],"names":["module","exports","StateMachine","require","SortedArray","sortable","Function","bindable","transition","final","Deterministic","augment","base","constructor","call","test","string","state","index","length","charAt","indexOf","Nondeterministic","epsilonMoves","moveOn","apply","concat","isFinal","subset","initial","names","toString","states","i","symbols","moves","node","j","symbol","next","name","push","stack","Array","from","arguments","pop","move","search","insert","array","keys","Object","key","remove"],"mappings":"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","sourcesContent":["if (typeof module === \"object\") module.exports = StateMachine;\n\nif (typeof require === \"function\") {\n    var SortedArray = require(\"sorted-array\");\n    require(\"augment\");\n}\n\nvar sortable = Function.bindable(SortedArray, null);\n\nfunction StateMachine(transition, final) {\n    this.transition = transition;\n    this.final = final;\n}\n\nStateMachine.Deterministic = StateMachine.augment(function (base) {\n    this.constructor = function (transition, final) {\n        base.constructor.call(this, transition, final);\n    };\n\n    this.test = function (string) {\n        var state = 0, index = 0;\n        var length = string.length;\n        var transition = this.transition;\n\n        while (index < length) {\n            state = transition[state][string.charAt(index++)];\n            if (typeof state === \"undefined\") return false;\n        }\n\n        return this.final.indexOf(state) >= 0;\n    };\n});\n\nStateMachine.Nondeterministic = StateMachine.augment(function (base) {\n    this.constructor = function (transition, final) {\n        base.constructor.call(this, transition, final);\n    };\n\n    this.test = function (string) {\n        var index = 0;\n        var length = string.length;\n        var state = epsilonMoves.call(this, 0);\n\n        while (index < length) {\n            state = moveOn.apply(this, [string.charAt(index++)].concat(state));\n            if (state.length) state = epsilonMoves.apply(this, state);\n            else return false;\n        }\n\n        return isFinal.apply(this, state);\n    };\n\n    this.subset = function () {\n        var initial = epsilonMoves.call(this, 0);\n        var names = [initial.toString()];\n        var states = [initial];\n        var transition = [];\n        var final = [];\n\n        for (var i = 0; i < states.length; i++) {\n            var state = states[i];\n            var symbols = moves.apply(this, state);\n            var length = symbols.length;\n            var node = {};\n\n            for (var j = 0; j < length; j++) {\n                var symbol = symbols[j];\n                var next = epsilonMoves.apply(this,\n                    moveOn.apply(this, [symbol].concat(state)));\n                var name = next.toString();\n                var index = names.indexOf(name);\n\n                if (index < 0) {\n                    states.push(next);\n                    index = names.length;\n                    names.push(name);\n                }\n\n                node[symbol] = index;\n            }\n\n            transition.push(node);\n\n            if (isFinal.apply(this, state)) final.push(i);\n        }\n\n        return new StateMachine.Deterministic(transition, final);\n    };\n\n    function epsilonMoves() {\n        var stack = Array.from(arguments);\n        var states = new (sortable.apply(null, stack));\n        var transition = this.transition;\n\n        while (stack.length) {\n            var moves = transition[stack.pop()][\"\"];\n\n            if (moves) {\n                var length = moves.length;\n\n                for (var i = 0; i < length; i++) {\n                    var move = moves[i];\n\n                    if (states.search(move) < 0) {\n                        states.insert(move);\n                        stack.push(move);\n                    }\n                }\n            }\n        }\n\n        return states.array;\n    }\n\n    function moves() {\n        var transition = this.transition;\n        var stack = Array.from(arguments);\n        var symbols = new SortedArray;\n\n        while (stack.length) {\n            var keys = Object.keys(transition[stack.pop()]);\n            var length = keys.length;\n\n            for (var i = 0; i < length; i++) {\n                var key = keys[i];\n\n                if (symbols.search(key) < 0)\n                    symbols.insert(key);\n            }\n        }\n\n        return symbols.remove(\"\").array;\n    }\n\n    function moveOn(symbol) {\n        var stack = Array.from(arguments, 1);\n        var transition = this.transition;\n        var states = new SortedArray;\n\n        while (stack.length) {\n            var moves = transition[stack.pop()][symbol];\n\n            if (moves) {\n                var length = moves.length;\n\n                for (var i = 0; i < length; i++) {\n                    var move = moves[i];\n\n                    if (states.search(move) < 0)\n                        states.insert(move);\n                }\n            }\n        }\n\n        return states.array;\n    }\n\n    function isFinal() {\n        var stack = Array.from(arguments);\n        var final = this.final;\n\n        while (stack.length)\n            if (final.indexOf(stack.pop()) >= 0)\n                return true;\n\n        return false;\n    }\n});\n"]},"metadata":{},"sourceType":"script"}