{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar pause = require('pause'),\n    util = require('util'),\n    Strategy = require('passport-strategy');\n/**\n * `SessionStrategy` constructor.\n *\n * @api public\n */\n\n\nfunction SessionStrategy(options, deserializeUser) {\n  if (typeof options == 'function') {\n    deserializeUser = options;\n    options = undefined;\n  }\n\n  options = options || {};\n  Strategy.call(this);\n  this.name = 'session';\n  this._deserializeUser = deserializeUser;\n}\n/**\n * Inherit from `Strategy`.\n */\n\n\nutil.inherits(SessionStrategy, Strategy);\n/**\n * Authenticate request based on the current session state.\n *\n * The session authentication strategy uses the session to restore any login\n * state across requests.  If a login session has been established, `req.user`\n * will be populated with the current user.\n *\n * This strategy is registered automatically by Passport.\n *\n * @param {Object} req\n * @param {Object} options\n * @api protected\n */\n\nSessionStrategy.prototype.authenticate = function (req, options) {\n  if (!req._passport) {\n    return this.error(new Error('passport.initialize() middleware not in use'));\n  }\n\n  options = options || {};\n  var self = this,\n      su;\n\n  if (req._passport.session) {\n    su = req._passport.session.user;\n  }\n\n  if (su || su === 0) {\n    // NOTE: Stream pausing is desirable in the case where later middleware is\n    //       listening for events emitted from request.  For discussion on the\n    //       matter, refer to: https://github.com/jaredhanson/passport/pull/106\n    var paused = options.pauseStream ? pause(req) : null;\n\n    this._deserializeUser(su, req, function (err, user) {\n      if (err) {\n        return self.error(err);\n      }\n\n      if (!user) {\n        delete req._passport.session.user;\n      } else {\n        // TODO: Remove instance access\n        var property = req._passport.instance._userProperty || 'user';\n        req[property] = user;\n      }\n\n      self.pass();\n\n      if (paused) {\n        paused.resume();\n      }\n    });\n  } else {\n    self.pass();\n  }\n};\n/**\n * Expose `SessionStrategy`.\n */\n\n\nmodule.exports = SessionStrategy;","map":{"version":3,"sources":["/home/elvis/Documents/GitHub/medbase/mern-auth/node_modules/passport/lib/strategies/session.js"],"names":["pause","require","util","Strategy","SessionStrategy","options","deserializeUser","undefined","call","name","_deserializeUser","inherits","prototype","authenticate","req","_passport","error","Error","self","su","session","user","paused","pauseStream","err","property","instance","_userProperty","pass","resume","module","exports"],"mappings":"AAAA;;;AAGA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;AAAA,IACIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CADlB;AAAA,IAEIE,QAAQ,GAAGF,OAAO,CAAC,mBAAD,CAFtB;AAKA;;;;;;;AAKA,SAASG,eAAT,CAAyBC,OAAzB,EAAkCC,eAAlC,EAAmD;AACjD,MAAI,OAAOD,OAAP,IAAkB,UAAtB,EAAkC;AAChCC,IAAAA,eAAe,GAAGD,OAAlB;AACAA,IAAAA,OAAO,GAAGE,SAAV;AACD;;AACDF,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEAF,EAAAA,QAAQ,CAACK,IAAT,CAAc,IAAd;AACA,OAAKC,IAAL,GAAY,SAAZ;AACA,OAAKC,gBAAL,GAAwBJ,eAAxB;AACD;AAED;;;;;AAGAJ,IAAI,CAACS,QAAL,CAAcP,eAAd,EAA+BD,QAA/B;AAEA;;;;;;;;;;;;;;AAaAC,eAAe,CAACQ,SAAhB,CAA0BC,YAA1B,GAAyC,UAASC,GAAT,EAAcT,OAAd,EAAuB;AAC9D,MAAI,CAACS,GAAG,CAACC,SAAT,EAAoB;AAAE,WAAO,KAAKC,KAAL,CAAW,IAAIC,KAAJ,CAAU,6CAAV,CAAX,CAAP;AAA8E;;AACpGZ,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,MAAIa,IAAI,GAAG,IAAX;AAAA,MACIC,EADJ;;AAEA,MAAIL,GAAG,CAACC,SAAJ,CAAcK,OAAlB,EAA2B;AACzBD,IAAAA,EAAE,GAAGL,GAAG,CAACC,SAAJ,CAAcK,OAAd,CAAsBC,IAA3B;AACD;;AAED,MAAIF,EAAE,IAAIA,EAAE,KAAK,CAAjB,EAAoB;AAClB;AACA;AACA;AAEA,QAAIG,MAAM,GAAGjB,OAAO,CAACkB,WAAR,GAAsBvB,KAAK,CAACc,GAAD,CAA3B,GAAmC,IAAhD;;AACA,SAAKJ,gBAAL,CAAsBS,EAAtB,EAA0BL,GAA1B,EAA+B,UAASU,GAAT,EAAcH,IAAd,EAAoB;AACjD,UAAIG,GAAJ,EAAS;AAAE,eAAON,IAAI,CAACF,KAAL,CAAWQ,GAAX,CAAP;AAAyB;;AACpC,UAAI,CAACH,IAAL,EAAW;AACT,eAAOP,GAAG,CAACC,SAAJ,CAAcK,OAAd,CAAsBC,IAA7B;AACD,OAFD,MAEO;AACL;AACA,YAAII,QAAQ,GAAGX,GAAG,CAACC,SAAJ,CAAcW,QAAd,CAAuBC,aAAvB,IAAwC,MAAvD;AACAb,QAAAA,GAAG,CAACW,QAAD,CAAH,GAAgBJ,IAAhB;AACD;;AACDH,MAAAA,IAAI,CAACU,IAAL;;AACA,UAAIN,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACO,MAAP;AACD;AACF,KAbD;AAcD,GApBD,MAoBO;AACLX,IAAAA,IAAI,CAACU,IAAL;AACD;AACF,CAjCD;AAoCA;;;;;AAGAE,MAAM,CAACC,OAAP,GAAiB3B,eAAjB","sourcesContent":["/**\n * Module dependencies.\n */\nvar pause = require('pause')\n  , util = require('util')\n  , Strategy = require('passport-strategy');\n\n\n/**\n * `SessionStrategy` constructor.\n *\n * @api public\n */\nfunction SessionStrategy(options, deserializeUser) {\n  if (typeof options == 'function') {\n    deserializeUser = options;\n    options = undefined;\n  }\n  options = options || {};\n  \n  Strategy.call(this);\n  this.name = 'session';\n  this._deserializeUser = deserializeUser;\n}\n\n/**\n * Inherit from `Strategy`.\n */\nutil.inherits(SessionStrategy, Strategy);\n\n/**\n * Authenticate request based on the current session state.\n *\n * The session authentication strategy uses the session to restore any login\n * state across requests.  If a login session has been established, `req.user`\n * will be populated with the current user.\n *\n * This strategy is registered automatically by Passport.\n *\n * @param {Object} req\n * @param {Object} options\n * @api protected\n */\nSessionStrategy.prototype.authenticate = function(req, options) {\n  if (!req._passport) { return this.error(new Error('passport.initialize() middleware not in use')); }\n  options = options || {};\n\n  var self = this, \n      su;\n  if (req._passport.session) {\n    su = req._passport.session.user;\n  }\n\n  if (su || su === 0) {\n    // NOTE: Stream pausing is desirable in the case where later middleware is\n    //       listening for events emitted from request.  For discussion on the\n    //       matter, refer to: https://github.com/jaredhanson/passport/pull/106\n    \n    var paused = options.pauseStream ? pause(req) : null;\n    this._deserializeUser(su, req, function(err, user) {\n      if (err) { return self.error(err); }\n      if (!user) {\n        delete req._passport.session.user;\n      } else {\n        // TODO: Remove instance access\n        var property = req._passport.instance._userProperty || 'user';\n        req[property] = user;\n      }\n      self.pass();\n      if (paused) {\n        paused.resume();\n      }\n    });\n  } else {\n    self.pass();\n  }\n};\n\n\n/**\n * Expose `SessionStrategy`.\n */\nmodule.exports = SessionStrategy;\n"]},"metadata":{},"sourceType":"script"}