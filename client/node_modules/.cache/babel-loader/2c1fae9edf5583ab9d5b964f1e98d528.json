{"ast":null,"code":"import { useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport ReactDOM from 'react-dom';\nimport canUseDom from './Dom/canUseDom';\nvar Portal = forwardRef(function (props, ref) {\n  var didUpdate = props.didUpdate,\n      getContainer = props.getContainer,\n      children = props.children;\n  var containerRef = useRef(); // Ref return nothing, only for wrapper check exist\n\n  useImperativeHandle(ref, function () {\n    return {};\n  }); // Create container in client side with sync to avoid useEffect not get ref\n\n  var initRef = useRef(false);\n\n  if (!initRef.current && canUseDom()) {\n    containerRef.current = getContainer();\n    initRef.current = true;\n  }\n\n  useEffect(function () {\n    // Not know who use this. Just keep it here\n    didUpdate === null || didUpdate === void 0 ? void 0 : didUpdate(props);\n    return function () {\n      if (containerRef.current) {\n        containerRef.current.parentNode.removeChild(containerRef.current);\n      }\n    };\n  }, []);\n  return containerRef.current ? ReactDOM.createPortal(children, containerRef.current) : null;\n});\nexport default Portal;","map":{"version":3,"sources":["/home/elvis/Documents/GitHub/medbase/node_modules/rc-util/es/Portal.js"],"names":["useRef","useEffect","forwardRef","useImperativeHandle","ReactDOM","canUseDom","Portal","props","ref","didUpdate","getContainer","children","containerRef","initRef","current","parentNode","removeChild","createPortal"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,UAA5B,EAAwCC,mBAAxC,QAAmE,OAAnE;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,IAAIC,MAAM,GAAGJ,UAAU,CAAC,UAAUK,KAAV,EAAiBC,GAAjB,EAAsB;AAC5C,MAAIC,SAAS,GAAGF,KAAK,CAACE,SAAtB;AAAA,MACIC,YAAY,GAAGH,KAAK,CAACG,YADzB;AAAA,MAEIC,QAAQ,GAAGJ,KAAK,CAACI,QAFrB;AAGA,MAAIC,YAAY,GAAGZ,MAAM,EAAzB,CAJ4C,CAIf;;AAE7BG,EAAAA,mBAAmB,CAACK,GAAD,EAAM,YAAY;AACnC,WAAO,EAAP;AACD,GAFkB,CAAnB,CAN4C,CAQxC;;AAEJ,MAAIK,OAAO,GAAGb,MAAM,CAAC,KAAD,CAApB;;AAEA,MAAI,CAACa,OAAO,CAACC,OAAT,IAAoBT,SAAS,EAAjC,EAAqC;AACnCO,IAAAA,YAAY,CAACE,OAAb,GAAuBJ,YAAY,EAAnC;AACAG,IAAAA,OAAO,CAACC,OAAR,GAAkB,IAAlB;AACD;;AAEDb,EAAAA,SAAS,CAAC,YAAY;AACpB;AACAQ,IAAAA,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACF,KAAD,CAA/D;AACA,WAAO,YAAY;AACjB,UAAIK,YAAY,CAACE,OAAjB,EAA0B;AACxBF,QAAAA,YAAY,CAACE,OAAb,CAAqBC,UAArB,CAAgCC,WAAhC,CAA4CJ,YAAY,CAACE,OAAzD;AACD;AACF,KAJD;AAKD,GARQ,EAQN,EARM,CAAT;AASA,SAAOF,YAAY,CAACE,OAAb,GAAuBV,QAAQ,CAACa,YAAT,CAAsBN,QAAtB,EAAgCC,YAAY,CAACE,OAA7C,CAAvB,GAA+E,IAAtF;AACD,CA3BsB,CAAvB;AA4BA,eAAeR,MAAf","sourcesContent":["import { useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport ReactDOM from 'react-dom';\nimport canUseDom from './Dom/canUseDom';\nvar Portal = forwardRef(function (props, ref) {\n  var didUpdate = props.didUpdate,\n      getContainer = props.getContainer,\n      children = props.children;\n  var containerRef = useRef(); // Ref return nothing, only for wrapper check exist\n\n  useImperativeHandle(ref, function () {\n    return {};\n  }); // Create container in client side with sync to avoid useEffect not get ref\n\n  var initRef = useRef(false);\n\n  if (!initRef.current && canUseDom()) {\n    containerRef.current = getContainer();\n    initRef.current = true;\n  }\n\n  useEffect(function () {\n    // Not know who use this. Just keep it here\n    didUpdate === null || didUpdate === void 0 ? void 0 : didUpdate(props);\n    return function () {\n      if (containerRef.current) {\n        containerRef.current.parentNode.removeChild(containerRef.current);\n      }\n    };\n  }, []);\n  return containerRef.current ? ReactDOM.createPortal(children, containerRef.current) : null;\n});\nexport default Portal;"]},"metadata":{},"sourceType":"module"}