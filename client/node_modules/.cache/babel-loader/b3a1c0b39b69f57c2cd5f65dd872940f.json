{"ast":null,"code":"/* parser generated by jison 0.4.11 */\n\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar ebnf = function () {\n  var parser = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      \"error\": 2,\n      \"production\": 3,\n      \"handle\": 4,\n      \"EOF\": 5,\n      \"handle_list\": 6,\n      \"|\": 7,\n      \"expression_suffix\": 8,\n      \"expression\": 9,\n      \"suffix\": 10,\n      \"ALIAS\": 11,\n      \"symbol\": 12,\n      \"(\": 13,\n      \")\": 14,\n      \"*\": 15,\n      \"?\": 16,\n      \"+\": 17,\n      \"$accept\": 0,\n      \"$end\": 1\n    },\n    terminals_: {\n      2: \"error\",\n      5: \"EOF\",\n      7: \"|\",\n      11: \"ALIAS\",\n      12: \"symbol\",\n      13: \"(\",\n      14: \")\",\n      15: \"*\",\n      16: \"?\",\n      17: \"+\"\n    },\n    productions_: [0, [3, 2], [6, 1], [6, 3], [4, 0], [4, 2], [8, 3], [8, 2], [9, 1], [9, 3], [10, 0], [10, 1], [10, 1], [10, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate\n    /* action[1] */\n    , $$\n    /* vstack */\n    , _$\n    /* lstack */\n    ) {\n      /* this == yyval */\n      var $0 = $$.length - 1;\n\n      switch (yystate) {\n        case 1:\n          return $$[$0 - 1];\n          break;\n\n        case 2:\n          this.$ = [$$[$0]];\n          break;\n\n        case 3:\n          $$[$0 - 2].push($$[$0]);\n          break;\n\n        case 4:\n          this.$ = [];\n          break;\n\n        case 5:\n          $$[$0 - 1].push($$[$0]);\n          break;\n\n        case 6:\n          this.$ = ['xalias', $$[$0 - 1], $$[$0 - 2], $$[$0]];\n          break;\n\n        case 7:\n          if ($$[$0]) this.$ = [$$[$0], $$[$0 - 1]];else this.$ = $$[$0 - 1];\n          break;\n\n        case 8:\n          this.$ = ['symbol', $$[$0]];\n          break;\n\n        case 9:\n          this.$ = ['()', $$[$0 - 1]];\n          break;\n      }\n    },\n    table: [{\n      3: 1,\n      4: 2,\n      5: [2, 4],\n      12: [2, 4],\n      13: [2, 4]\n    }, {\n      1: [3]\n    }, {\n      5: [1, 3],\n      8: 4,\n      9: 5,\n      12: [1, 6],\n      13: [1, 7]\n    }, {\n      1: [2, 1]\n    }, {\n      5: [2, 5],\n      7: [2, 5],\n      12: [2, 5],\n      13: [2, 5],\n      14: [2, 5]\n    }, {\n      5: [2, 10],\n      7: [2, 10],\n      10: 8,\n      11: [2, 10],\n      12: [2, 10],\n      13: [2, 10],\n      14: [2, 10],\n      15: [1, 9],\n      16: [1, 10],\n      17: [1, 11]\n    }, {\n      5: [2, 8],\n      7: [2, 8],\n      11: [2, 8],\n      12: [2, 8],\n      13: [2, 8],\n      14: [2, 8],\n      15: [2, 8],\n      16: [2, 8],\n      17: [2, 8]\n    }, {\n      4: 13,\n      6: 12,\n      7: [2, 4],\n      12: [2, 4],\n      13: [2, 4],\n      14: [2, 4]\n    }, {\n      5: [2, 7],\n      7: [2, 7],\n      11: [1, 14],\n      12: [2, 7],\n      13: [2, 7],\n      14: [2, 7]\n    }, {\n      5: [2, 11],\n      7: [2, 11],\n      11: [2, 11],\n      12: [2, 11],\n      13: [2, 11],\n      14: [2, 11]\n    }, {\n      5: [2, 12],\n      7: [2, 12],\n      11: [2, 12],\n      12: [2, 12],\n      13: [2, 12],\n      14: [2, 12]\n    }, {\n      5: [2, 13],\n      7: [2, 13],\n      11: [2, 13],\n      12: [2, 13],\n      13: [2, 13],\n      14: [2, 13]\n    }, {\n      7: [1, 16],\n      14: [1, 15]\n    }, {\n      7: [2, 2],\n      8: 4,\n      9: 5,\n      12: [1, 6],\n      13: [1, 7],\n      14: [2, 2]\n    }, {\n      5: [2, 6],\n      7: [2, 6],\n      12: [2, 6],\n      13: [2, 6],\n      14: [2, 6]\n    }, {\n      5: [2, 9],\n      7: [2, 9],\n      11: [2, 9],\n      12: [2, 9],\n      13: [2, 9],\n      14: [2, 9],\n      15: [2, 9],\n      16: [2, 9],\n      17: [2, 9]\n    }, {\n      4: 17,\n      7: [2, 4],\n      12: [2, 4],\n      13: [2, 4],\n      14: [2, 4]\n    }, {\n      7: [2, 3],\n      8: 4,\n      9: 5,\n      12: [1, 6],\n      13: [1, 7],\n      14: [2, 3]\n    }],\n    defaultActions: {\n      3: [2, 1]\n    },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        throw new Error(str);\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n          stack = [0],\n          vstack = [null],\n          lstack = [],\n          table = this.table,\n          yytext = '',\n          yylineno = 0,\n          yyleng = 0,\n          recovering = 0,\n          TERROR = 2,\n          EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      this.lexer.setInput(input);\n      this.lexer.yy = this.yy;\n      this.yy.lexer = this.lexer;\n      this.yy.parser = this;\n\n      if (typeof this.lexer.yylloc == 'undefined') {\n        this.lexer.yylloc = {};\n      }\n\n      var yyloc = this.lexer.yylloc;\n      lstack.push(yyloc);\n      var ranges = this.lexer.options && this.lexer.options.ranges;\n\n      if (typeof this.yy.parseError === 'function') {\n        this.parseError = this.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n\n      function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n      }\n\n      function lex() {\n        var token;\n        token = self.lexer.lex() || EOF;\n\n        if (typeof token !== 'number') {\n          token = self.symbols_[token] || token;\n        }\n\n        return token;\n      }\n\n      var symbol,\n          preErrorSymbol,\n          state,\n          action,\n          a,\n          r,\n          yyval = {},\n          p,\n          len,\n          newState,\n          expected;\n\n      while (true) {\n        state = stack[stack.length - 1];\n\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == 'undefined') {\n            symbol = lex();\n          }\n\n          action = table[state] && table[state][symbol];\n        }\n\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n          var errStr = '';\n          expected = [];\n\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push('\\'' + this.terminals_[p] + '\\'');\n            }\n          }\n\n          if (this.lexer.showPosition) {\n            errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + this.lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n          } else {\n            errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n          }\n\n          this.parseError(errStr, {\n            text: this.lexer.match,\n            token: this.terminals_[symbol] || symbol,\n            line: this.lexer.yylineno,\n            loc: yyloc,\n            expected: expected\n          });\n        }\n\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(this.lexer.yytext);\n            lstack.push(this.lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n\n            if (!preErrorSymbol) {\n              yyleng = this.lexer.yyleng;\n              yytext = this.lexer.yytext;\n              yylineno = this.lexer.yylineno;\n              yyloc = this.lexer.yylloc;\n\n              if (recovering > 0) {\n                recovering--;\n              }\n            } else {\n              symbol = preErrorSymbol;\n              preErrorSymbol = null;\n            }\n\n            break;\n\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n\n            if (ranges) {\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack].concat(args));\n\n            if (typeof r !== 'undefined') {\n              return r;\n            }\n\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n\n          case 3:\n            return true;\n        }\n      }\n\n      return true;\n    }\n  };\n  /* generated by jison-lex 0.2.1 */\n\n  var lexer = function () {\n    var lexer = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function (input) {\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1); //this.yyleng -= len;\n\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function () {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function () {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n\n        return this;\n      },\n      // retain first n characters of the match\n      less: function (n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function () {\n        var next = this.match;\n\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n\n        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function (match, indexed_rule) {\n        var token, lines, backup;\n\n        if (this.options.backtrack_lexer) {\n          // save context\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n\n        if (this.done && this._input) {\n          this.done = false;\n        }\n\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          // recover context\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n\n          return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n\n        return false;\n      },\n      // return next match in input\n      next: function () {\n        if (this.done) {\n          return this.EOF;\n        }\n\n        if (!this._input) {\n          this.done = true;\n        }\n\n        var token, match, tempMatch, index;\n\n        if (!this._more) {\n          this.yytext = '';\n          this.match = '';\n        }\n\n        var rules = this._currentRules();\n\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue; // rule action called reject() implying a rule MISmatch.\n              } else {\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n\n        if (match) {\n          token = this.test_match(match, rules[index]);\n\n          if (token !== false) {\n            return token;\n          } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n\n          return false;\n        }\n\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {},\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        var YYSTATE = YY_START;\n\n        switch ($avoiding_name_collisions) {\n          case 0:\n            /* skip whitespace */\n            break;\n\n          case 1:\n            return 12;\n            break;\n\n          case 2:\n            yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);\n            return 11;\n            break;\n\n          case 3:\n            return 12;\n            break;\n\n          case 4:\n            return 12;\n            break;\n\n          case 5:\n            return 'bar';\n            break;\n\n          case 6:\n            return 13;\n            break;\n\n          case 7:\n            return 14;\n            break;\n\n          case 8:\n            return 15;\n            break;\n\n          case 9:\n            return 16;\n            break;\n\n          case 10:\n            return 7;\n            break;\n\n          case 11:\n            return 17;\n            break;\n\n          case 12:\n            return 5;\n            break;\n        }\n      },\n      rules: [/^(?:\\s+)/, /^(?:([a-zA-Z][a-zA-Z0-9_-]*))/, /^(?:\\[([a-zA-Z][a-zA-Z0-9_-]*)\\])/, /^(?:'[^']*')/, /^(?:\\.)/, /^(?:bar\\b)/, /^(?:\\()/, /^(?:\\))/, /^(?:\\*)/, /^(?:\\?)/, /^(?:\\|)/, /^(?:\\+)/, /^(?:$)/],\n      conditions: {\n        \"INITIAL\": {\n          \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n          \"inclusive\": true\n        }\n      }\n    };\n    return lexer;\n  }();\n\n  parser.lexer = lexer;\n\n  function Parser() {\n    this.yy = {};\n  }\n\n  Parser.prototype = parser;\n  parser.Parser = Parser;\n  return new Parser();\n}();\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\n  exports.parser = ebnf;\n  exports.Parser = ebnf.Parser;\n\n  exports.parse = function () {\n    return ebnf.parse.apply(ebnf, arguments);\n  };\n\n  exports.main = function commonjsMain(args) {\n    if (!args[1]) {\n      console.log('Usage: ' + args[0] + ' FILE');\n      process.exit(1);\n    }\n\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n\n    return exports.parser.parse(source);\n  };\n\n  if (typeof module !== 'undefined' && require.main === module) {\n    exports.main(process.argv.slice(1));\n  }\n}","map":{"version":3,"sources":["/home/elvis/Documents/GitHub/medbase/mern-auth/node_modules/ebnf-parser/transform-parser.js"],"names":["ebnf","parser","trace","yy","symbols_","terminals_","productions_","performAction","anonymous","yytext","yyleng","yylineno","yystate","$$","_$","$0","length","$","push","table","defaultActions","parseError","str","hash","recoverable","Error","parse","input","self","stack","vstack","lstack","recovering","TERROR","EOF","args","slice","call","arguments","lexer","setInput","yylloc","yyloc","ranges","options","Object","getPrototypeOf","popStack","n","lex","token","symbol","preErrorSymbol","state","action","a","r","yyval","p","len","newState","expected","errStr","showPosition","join","text","match","line","loc","Array","first_line","last_line","first_column","last_column","range","apply","concat","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","lines","unput","split","substr","oldLines","more","reject","backtrack_lexer","less","pastInput","past","replace","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","k","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","pop","conditions","topState","Math","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","YYSTATE","Parser","prototype","require","exports","main","commonjsMain","console","log","process","exit","source","readFileSync","normalize","module","argv"],"mappings":"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","sourcesContent":["/* parser generated by jison 0.4.11 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar ebnf = (function(){\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"production\":3,\"handle\":4,\"EOF\":5,\"handle_list\":6,\"|\":7,\"expression_suffix\":8,\"expression\":9,\"suffix\":10,\"ALIAS\":11,\"symbol\":12,\"(\":13,\")\":14,\"*\":15,\"?\":16,\"+\":17,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",7:\"|\",11:\"ALIAS\",12:\"symbol\",13:\"(\",14:\")\",15:\"*\",16:\"?\",17:\"+\"},\nproductions_: [0,[3,2],[6,1],[6,3],[4,0],[4,2],[8,3],[8,2],[9,1],[9,3],[10,0],[10,1],[10,1],[10,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1: return $$[$0-1]; \nbreak;\ncase 2: this.$ = [$$[$0]]; \nbreak;\ncase 3: $$[$0-2].push($$[$0]); \nbreak;\ncase 4: this.$ = []; \nbreak;\ncase 5: $$[$0-1].push($$[$0]); \nbreak;\ncase 6: this.$ = ['xalias', $$[$0-1], $$[$0-2], $$[$0]]; \nbreak;\ncase 7: if ($$[$0]) this.$ = [$$[$0], $$[$0-1]]; else this.$ = $$[$0-1]; \nbreak;\ncase 8: this.$ = ['symbol', $$[$0]]; \nbreak;\ncase 9: this.$ = ['()', $$[$0-1]]; \nbreak;\n}\n},\ntable: [{3:1,4:2,5:[2,4],12:[2,4],13:[2,4]},{1:[3]},{5:[1,3],8:4,9:5,12:[1,6],13:[1,7]},{1:[2,1]},{5:[2,5],7:[2,5],12:[2,5],13:[2,5],14:[2,5]},{5:[2,10],7:[2,10],10:8,11:[2,10],12:[2,10],13:[2,10],14:[2,10],15:[1,9],16:[1,10],17:[1,11]},{5:[2,8],7:[2,8],11:[2,8],12:[2,8],13:[2,8],14:[2,8],15:[2,8],16:[2,8],17:[2,8]},{4:13,6:12,7:[2,4],12:[2,4],13:[2,4],14:[2,4]},{5:[2,7],7:[2,7],11:[1,14],12:[2,7],13:[2,7],14:[2,7]},{5:[2,11],7:[2,11],11:[2,11],12:[2,11],13:[2,11],14:[2,11]},{5:[2,12],7:[2,12],11:[2,12],12:[2,12],13:[2,12],14:[2,12]},{5:[2,13],7:[2,13],11:[2,13],12:[2,13],13:[2,13],14:[2,13]},{7:[1,16],14:[1,15]},{7:[2,2],8:4,9:5,12:[1,6],13:[1,7],14:[2,2]},{5:[2,6],7:[2,6],12:[2,6],13:[2,6],14:[2,6]},{5:[2,9],7:[2,9],11:[2,9],12:[2,9],13:[2,9],14:[2,9],15:[2,9],16:[2,9],17:[2,9]},{4:17,7:[2,4],12:[2,4],13:[2,4],14:[2,4]},{7:[2,3],8:4,9:5,12:[1,6],13:[1,7],14:[2,3]}],\ndefaultActions: {3:[2,1]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        throw new Error(str);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    this.lexer.setInput(input);\n    this.lexer.yy = this.yy;\n    this.yy.lexer = this.lexer;\n    this.yy.parser = this;\n    if (typeof this.lexer.yylloc == 'undefined') {\n        this.lexer.yylloc = {};\n    }\n    var yyloc = this.lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = this.lexer.options && this.lexer.options.ranges;\n    if (typeof this.yy.parseError === 'function') {\n        this.parseError = this.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    function lex() {\n        var token;\n        token = self.lexer.lex() || EOF;\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (this.lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + this.lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: this.lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: this.lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(this.lexer.yytext);\n            lstack.push(this.lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = this.lexer.yyleng;\n                yytext = this.lexer.yytext;\n                yylineno = this.lexer.yylineno;\n                yyloc = this.lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                this.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.2.1 */\nvar lexer = (function(){\nvar lexer = {\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input) {\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\n\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip whitespace */\nbreak;\ncase 1:return 12;\nbreak;\ncase 2:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 11;\nbreak;\ncase 3:return 12;\nbreak;\ncase 4:return 12;\nbreak;\ncase 5:return 'bar';\nbreak;\ncase 6:return 13;\nbreak;\ncase 7:return 14;\nbreak;\ncase 8:return 15;\nbreak;\ncase 9:return 16;\nbreak;\ncase 10:return 7;\nbreak;\ncase 11:return 17;\nbreak;\ncase 12:return 5;\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:([a-zA-Z][a-zA-Z0-9_-]*))/,/^(?:\\[([a-zA-Z][a-zA-Z0-9_-]*)\\])/,/^(?:'[^']*')/,/^(?:\\.)/,/^(?:bar\\b)/,/^(?:\\()/,/^(?:\\))/,/^(?:\\*)/,/^(?:\\?)/,/^(?:\\|)/,/^(?:\\+)/,/^(?:$)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12],\"inclusive\":true}}\n};\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = ebnf;\nexports.Parser = ebnf.Parser;\nexports.parse = function () { return ebnf.parse.apply(ebnf, arguments); };\nexports.main = function commonjsMain(args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}"]},"metadata":{},"sourceType":"script"}