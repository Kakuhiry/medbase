{"ast":null,"code":"var EBNF = function () {\n  var parser = require('./transform-parser.js');\n\n  var transformExpression = function (e, opts, emit) {\n    var type = e[0],\n        value = e[1],\n        name = false;\n\n    if (type === 'xalias') {\n      type = e[1];\n      value = e[2];\n      name = e[3];\n\n      if (type) {\n        e = e.slice(1, 2);\n      } else {\n        e = value;\n        type = e[0];\n        value = e[1];\n      }\n    }\n\n    if (type === 'symbol') {\n      var n;\n      if (e[1][0] === '\\\\') n = e[1][1];else if (e[1][0] === '\\'') n = e[1].substring(1, e[1].length - 1);else n = e[1];\n      emit(n + (name ? \"[\" + name + \"]\" : \"\"));\n    } else if (type === \"+\") {\n      if (!name) {\n        name = opts.production + \"_repetition_plus\" + opts.repid++;\n      }\n\n      emit(name);\n      opts = optsForProduction(name, opts.grammar);\n      var list = transformExpressionList([value], opts);\n      opts.grammar[name] = [[list, \"$$ = [$1];\"], [name + \" \" + list, \"$1.push($2);\"]];\n    } else if (type === \"*\") {\n      if (!name) {\n        name = opts.production + \"_repetition\" + opts.repid++;\n      }\n\n      emit(name);\n      opts = optsForProduction(name, opts.grammar);\n      opts.grammar[name] = [[\"\", \"$$ = [];\"], [name + \" \" + transformExpressionList([value], opts), \"$1.push($2);\"]];\n    } else if (type === \"?\") {\n      if (!name) {\n        name = opts.production + \"_option\" + opts.optid++;\n      }\n\n      emit(name);\n      opts = optsForProduction(name, opts.grammar);\n      opts.grammar[name] = [\"\", transformExpressionList([value], opts)];\n    } else if (type === \"()\") {\n      if (value.length == 1) {\n        emit(transformExpressionList(value[0], opts));\n      } else {\n        if (!name) {\n          name = opts.production + \"_group\" + opts.groupid++;\n        }\n\n        emit(name);\n        opts = optsForProduction(name, opts.grammar);\n        opts.grammar[name] = value.map(function (handle) {\n          return transformExpressionList(handle, opts);\n        });\n      }\n    }\n  };\n\n  var transformExpressionList = function (list, opts) {\n    return list.reduce(function (tot, e) {\n      transformExpression(e, opts, function (i) {\n        tot.push(i);\n      });\n      return tot;\n    }, []).join(\" \");\n  };\n\n  var optsForProduction = function (id, grammar) {\n    return {\n      production: id,\n      repid: 0,\n      groupid: 0,\n      optid: 0,\n      grammar: grammar\n    };\n  };\n\n  var transformProduction = function (id, production, grammar) {\n    var transform_opts = optsForProduction(id, grammar);\n    return production.map(function (handle) {\n      var action = null,\n          opts = null;\n      if (typeof handle !== 'string') action = handle[1], opts = handle[2], handle = handle[0];\n      var expressions = parser.parse(handle);\n      handle = transformExpressionList(expressions, transform_opts);\n      var ret = [handle];\n      if (action) ret.push(action);\n      if (opts) ret.push(opts);\n      if (ret.length == 1) return ret[0];else return ret;\n    });\n  };\n\n  var transformGrammar = function (grammar) {\n    Object.keys(grammar).forEach(function (id) {\n      grammar[id] = transformProduction(id, grammar[id], grammar);\n    });\n  };\n\n  return {\n    transform: function (ebnf) {\n      transformGrammar(ebnf);\n      return ebnf;\n    }\n  };\n}();\n\nexports.transform = EBNF.transform;","map":{"version":3,"sources":["/home/elvis/Documents/GitHub/medbase/mern-auth/node_modules/ebnf-parser/ebnf-transform.js"],"names":["EBNF","parser","require","transformExpression","e","opts","emit","type","value","name","slice","n","substring","length","production","repid","optsForProduction","grammar","list","transformExpressionList","optid","groupid","map","handle","reduce","tot","i","push","join","id","transformProduction","transform_opts","action","expressions","parse","ret","transformGrammar","Object","keys","forEach","transform","ebnf","exports"],"mappings":"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","sourcesContent":["var EBNF = (function(){\n    var parser = require('./transform-parser.js');\n\n    var transformExpression = function(e, opts, emit) {\n        var type = e[0], value = e[1], name = false;\n\n        if (type === 'xalias') {\n            type = e[1];\n            value = e[2]\n            name = e[3];\n            if (type) {\n                e = e.slice(1,2);\n            } else {\n                e = value;\n                type = e[0];\n                value = e[1];\n            }\n        }\n\n        if (type === 'symbol') {\n            var n;\n            if (e[1][0] === '\\\\') n = e[1][1];\n            else if (e[1][0] === '\\'') n = e[1].substring(1, e[1].length-1);\n            else n = e[1];\n            emit(n + (name ? \"[\"+name+\"]\" : \"\"));\n        } else if (type === \"+\") {\n            if (!name) {\n                name = opts.production + \"_repetition_plus\" + opts.repid++;\n            }\n            emit(name);\n\n            opts = optsForProduction(name, opts.grammar);\n            var list = transformExpressionList([value], opts);\n            opts.grammar[name] = [\n                [list, \"$$ = [$1];\"],\n                [\n                    name + \" \" + list,\n                    \"$1.push($2);\"\n                ]\n            ];\n        } else if (type === \"*\") {\n            if (!name) {\n                name = opts.production + \"_repetition\" + opts.repid++;\n            }\n            emit(name);\n\n            opts = optsForProduction(name, opts.grammar);\n            opts.grammar[name] = [\n                [\"\", \"$$ = [];\"],\n                [\n                    name + \" \" + transformExpressionList([value], opts),\n                    \"$1.push($2);\"\n                ]\n            ];\n        } else if (type ===\"?\") {\n            if (!name) {\n                name = opts.production + \"_option\" + opts.optid++;\n            }\n            emit(name);\n\n            opts = optsForProduction(name, opts.grammar);\n            opts.grammar[name] = [\n                \"\", transformExpressionList([value], opts)\n            ];\n        } else if (type === \"()\") {\n            if (value.length == 1) {\n                emit(transformExpressionList(value[0], opts));\n            } else {\n                if (!name) {\n                    name = opts.production + \"_group\" + opts.groupid++;\n                }\n                emit(name);\n\n                opts = optsForProduction(name, opts.grammar);\n                opts.grammar[name] = value.map(function(handle) {\n                    return transformExpressionList(handle, opts);\n                });\n            }\n        }\n    };\n\n    var transformExpressionList = function(list, opts) {\n        return list.reduce (function (tot, e) {\n            transformExpression (e, opts, function (i) { tot.push(i); });\n            return tot;\n        }, []).\n        join(\" \");\n    };\n\n    var optsForProduction = function(id, grammar) {\n        return {\n            production: id,\n            repid: 0,\n            groupid: 0,\n            optid: 0,\n            grammar: grammar\n        };\n    };\n\n    var transformProduction = function(id, production, grammar) {\n        var transform_opts = optsForProduction(id, grammar);\n        return production.map(function (handle) {\n            var action = null, opts = null;\n            if (typeof(handle) !== 'string')\n                action = handle[1],\n                opts = handle[2],\n                handle = handle[0];\n            var expressions = parser.parse(handle);\n\n            handle = transformExpressionList(expressions, transform_opts);\n\n            var ret = [handle];\n            if (action) ret.push(action);\n            if (opts) ret.push(opts);\n            if (ret.length == 1) return ret[0];\n            else return ret;\n        });\n    };\n\n    var transformGrammar = function(grammar) {\n        Object.keys(grammar).forEach(function(id) {\n            grammar[id] = transformProduction(id, grammar[id], grammar);\n        });\n    };\n\n    return {\n        transform: function (ebnf) {\n            transformGrammar(ebnf);\n            return ebnf;\n        }\n    };\n})();\n\nexports.transform = EBNF.transform;\n\n"]},"metadata":{},"sourceType":"script"}